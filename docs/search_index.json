[["index.html", "PSYC208 Take Home Assignments About This Website", " PSYC208 Take Home Assignments Huey Woon LEE 2022-03-22 About This Website This website contains materials related to the take home assignments used in my PSYC208 Research Methods II class. These assignments are graded on a PASS/FAIL basis. If the assignment is correctly done, the assignment is marked as PASS; otherwise, it is marked as FAIL. Unless there are exceptional circumstances (please inform TA or me), responses submitted after a grace period of 5 minutes will also be graded as FAIL. These take home assignments would not have been possible without the generosity of Dr.Â Kevin P. McIntyre, who created many of them for the OSL Open Stats Lab. "],["getting-started.html", "1 Getting Started 1.1 Install R and RStudio 1.2 The RStudio Interface 1.3 R Script 1.4 Some Basic Commands 1.5 Typing and Executing Commands 1.6 Some Tips and Tricks", " 1 Getting Started To complete the take home assignments, you need both R and RStudio. These are different programmes. I think of R as the software that executes our commands and RStudio as the interface between us and R that makes interacting with R a much more pleasant experience. RStudio has many nifty features, like the spellchecker and the keyboard shortcuts that make writing code much faster and easier. For the sake of your sanity, I strongly recommend you download both programmes! 1.1 Install R and RStudio Install R For Windows Open an internet browser and go to https://cloud.r-project.org/. Under Download and Install R, Click on Download R for Windows. Click on base. Download the latest release by saving the .exe file on your computer. Double-click the file and follow the installation instructions. For macOS Open an internet browser and go to https://cloud.r-project.org/. Under Download and Install R, click on Download R for macOS. Download the latest release by saving the .pkg file to your computer. Double-click the file and follow the installation instructions. Install RStudio Now that R is installed, download and install RStudio. Go to https://www.rstudio.com/products/rstudio/download/. Click Download under RStudio Desktop. Click on the version recommended for your system, or the latest Windows / macOS version, and save the file. Double-click the file and follow the installation instructions. 1.2 The RStudio Interface Now, start up RStudio. You should see something like this: Figure 1.1: R Studio Interface With Three Panes When you start up RStudio, you will see three panes: the R console, the workspace, and the files, plots, packages, help, and viewer pane. Each pane serves different purposes. R console: The R console is where commands are submitted to R for R to execute. It is also where we find some of the output from R (e.g., analysis results). Workspace: I think of this as Rs short-term memory. There are two tabs that are particularly useful. Environment tab: We can find the list of objects (e.g., variables) that we created in the session here. History tab: Here is where we can find all the previous commands we submitted to R in the session. Files, plots, packages, help, and viewer: Files: We can create new folders on our computer, move, delete, and rename files here. Plots: We can find all the plots we instructed R to produce during the session here. Packages: We can find, install, and update packages. Packages contain functions that other people have created to supplement those in R. We will talk more about specific packages later. Help: We can find information about a given command or package. We can also find more information about various commands and the packages on this website: https://www.rdocumentation.org/ Note. Because the Terminal tab, the Connections tab, and the Viewer tab will not be used in this course, I will not talk about them. 1.3 R Script To get R to do stuff (e.g., conduct analyses), we submit commands to R through RStudio. Although we can type the commands directly into the console, R users prefer to type the commands into what is called the script editor because we can save the commands in the script editor into script files (with the extension .R). The script files allow us to keep long-term records of the analyses that we have conducted. We can also share the script files with other R users so that they can replicate our analyses. (In this class, I will use command and code interchangeably.) To open a blank R script, go to File &gt; New File &gt; R Script. Or, you can use the shortcut Ctrl + Shift + N (Windows) or Cmd + Shift + N (macOS). Notice now, your RStudio has four panes. The script editor now takes up the top half of the left hand side of the screen. Figure 1.2: R Studio With Four Panes 1.4 Some Basic Commands Before typing commands into the script editor, it might be useful for you to know some of the following basic commands. To place a comment in the script file, begin the line with #. To run (execute) a line in the script file, place the cursor on the line, hit Ctrl + Enter (Windows) or Cmd + Enter (macOS). If we typed the command directly into the console, we only need to hit Enter To run multiple lines in the script file, select the lines, hit Ctrl + Enter (Windows) or Cmd + Enter (macOS). To clear the console when it becomes too messy, hit Ctrl + L (Windows) or Cmd + L (macOS). To request help, type a question mark in front of the command or the package name (e.g., ?cor). Information about the command will appear in the Help tab (lower right pane). 1.5 Typing and Executing Commands Now, lets actually get R to do stuff for us! Copy and paste the following R codes into the Script Editor pane. Run each line (Ctrl/Cmd + Enter) to see what they do. Note that # denotes a comment, and therefore it will run as a line of text. Experiment and have fun! # Assign a value (e.g., 9) to an object, say x. x &lt;- 9 # this means &quot;x gets the value of 9&quot; # Get the value for x. x # Note that R is case-sensitive. If you typed X, you&#39;ll get an error message. # If you want to know what objects are in the workspace (i.e., R&#39;s memory), look at the Environments tab or type ls(). ls() # You may remove an object (e.g., x) from the workspace. rm(x) # where rm stands for remove # If there are too many objects in the workspace, you may remove all objects from the workspace using rm(list=ls()). rm(list = ls()) # Assign a non-numerical value by putting the value in quotation marks. y &lt;- &quot;hello!&quot; # Get the value of y. Notice the value of y is in quotation marks, indicating it is a non-numerical value. y # Perform the following mathematical operations in R. 11 + 10 11 - 10 11 * 10 11 / 10 11 ^ 10 11 ^ (1/2) sqrt(11) # this number should be the same as above line log(11) # taking natural log (log base e) log10(11) # taking log base 10 exp(11) # taking the exponential # Perform mathematical operations in R with an object (e.g., a). a &lt;- 11 # a gets the value of 11 a + 10 a - 10 a * 10 a / 10 a ^ (1/2) sqrt(a) log(a) log10(a) exp(a) # Perform mathematical operations with more than one object. y &lt;- 2 # notice that 2 now replaces the value hello. a + y a - y a * y a / y a ^ (1/y) # You cannot perform mathematical operations with non-numerical objects. b &lt;- &quot;1&quot; # recall, putting things in between quotation marks makes it non-numerical, even if 1 is a number. a + b # you get an error here because you cannot perform mathematical operations with non-numerical objects. 1.6 Some Tips and Tricks 1.6.1 Softwrap Long Lines Sometimes, we might write commands in the Script editor section that are too long (horizontally) to fit the window. To see the entire command, we might need to scroll horizontally. This can be frustrating. (Its like notepad, without word wrap.) Fortunately, we can wrap the text such that the code fits into the size of the window. Go to Code &gt; Soft Wrap Long Lines. I highly recommend you do this, especially if you tend to write a lot of comments in the script file like I do. 1.6.2 Using R Projects When we analyse data, we may have a bunch of different files from different projects all strewn in a single directory. This can be quite messy. To stay organised, it is best that we create a project. To do this, go to File &gt; New Project. A dialogue window with three options, New Directory, Existing Directory and Version Control, will appear. Select New Directory, followed by New Project. After RStudio has created the project, it will change the working directory to the project directory so that you can access all the files (e.g., data, script) related to this project in this directory. RStudio will also create a file with the extension .Rproj in the project directory. When you open this file, RStudio will automatically start a new session with the project directory as your working directory. While it is not absolutely necessary to use RStudio projects in this course, I recommend it because it will help keep you organized. "],["tidyverse.html", "2 Using tidyverse 2.1 Installing tidyverse", " 2 Using tidyverse The tidyverse is a collection of R packages that many data analysts use. In this course, we will be heavily relying on at least two of the packages: dplyr and ggplot2. Installing tidyverse will install all the packages in tidyverse, including dplyr and ggplot2. 2.1 Installing tidyverse install.packages(&quot;tidyverse&quot;) "],["tha1.html", "3 Assignment 1", " 3 Assignment 1 Under construction "],["tha2.html", "4 Assignment 2", " 4 Assignment 2 Under construction "],["tha3.html", "5 Assignment 3", " 5 Assignment 3 Under construction "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
