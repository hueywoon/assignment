[["index.html", "PSYC208 R Companion Website About This Website", " PSYC208 R Companion Website Huey Woon LEE 2022-04-01 About This Website This is the companion website for my PSYC208 class. It was written as a gentle introduction to R. So, it is most certainly not exhaustive or comprehensive. If youre interested in furthering your skills in R, there are plenty of resources available online which you can check out here, here or here. :) "],["getting-started.html", "1 Getting Started 1.1 Install R and RStudio 1.2 The RStudio Interface 1.3 R Script 1.4 Some Tips and Tricks", " 1 Getting Started To analyse data in R, you need both R and RStudio. These are different programmes. Think of R as the software that executes our commands and RStudio as the interface between us and R that makes interacting with R a much more pleasant experience. RStudio has many nifty features, like providing code suggestions and keyboard shortcuts that make writing code much faster and easier. For the sake of your sanity, I strongly recommend you download both programmes! 1.1 Install R and RStudio Install R For Windows Open an internet browser and go to https://cloud.r-project.org/. Under Download and Install R, Click on Download R for Windows. Click on base. Download the latest release by saving the .exe file on your computer. Double-click the file and follow the installation instructions. For macOS Open an internet browser and go to https://cloud.r-project.org/. Under Download and Install R, click on Download R for macOS. Download the latest release by saving the .pkg file to your computer. Double-click the file and follow the installation instructions. Install RStudio Now that R is installed, download and install RStudio. Go to https://www.rstudio.com/products/rstudio/download/. Click Download under RStudio Desktop. Click on the version recommended for your system, or the latest Windows / macOS version, and save the file. Double-click the file and follow the installation instructions. 1.2 The RStudio Interface Now, start up RStudio. You should see something like this: Figure 1.1: R Studio Interface With Three Panes When you first start up RStudio, you will see three panes: the R console, the workspace, and the files, plots, packages, help, and viewer pane. Each pane serves different purposes. R console: The R console is where commands are submitted to R for R to execute. It is also where we find some of the output from R (e.g., analysis results). Workspace: I think of this as Rs short-term memory. There are two tabs that are particularly useful. Environment tab: We can find the list of objects (e.g., variables, data frames, functions) that we created in the session here. History tab: Here is where we can find all the previous commands we submitted to R in the session. Files, plots, packages, help, and viewer: Files: We can create new folders on our computer, move, delete, and rename files here. Plots: We can find all the plots we instructed R to produce during the session here. Packages: We can find, install, and update packages here. Packages contain data, functions, help menus, etc. that other people have created to supplement those in R. We will talk more about specific packages later. Help: We can find information about a given command or package. We can also find more information about various commands and the packages on this website: https://www.rdocumentation.org/ Note. Because the Terminal tab, the Connections tab, and the Viewer tab will not be used in this course, I will not talk about them. 1.3 R Script To get R to do stuff (e.g., conduct analyses), we submit commands to R through RStudio. Although we can type the commands directly into the console, R users prefer to type the commands into what is called the script editor because we can save the commands in the script editor into script files (with the extension .R). The script files allow us to keep long-term records of the analyses that we have conducted. We can also share the script files with other R users so that they can reproduce our analyses. (In this class, I will use command and code interchangeably.) To open a blank R script, go to File &gt; New File &gt; R Script. Or, you can use the shortcut Ctrl + Shift + N (Windows) or Cmd + Shift + N (macOS). Notice that now, your RStudio has four panes. The script editor should now take up the top half of the left hand side of the screen as shown below. Figure 1.2: R Studio With Four Panes 1.4 Some Tips and Tricks Before we start coding proper, here are some tips to help you along your R journey. (These are things I wish I knew when I first started out!) 1.4.1 Softwrap Long Lines Sometimes, we might write commands in the Script editor section that are too long (horizontally) to fit the window. To see the entire command, we might need to scroll left and right. This can be frustrating. (Its like notepad, without word wrap.) Fortunately, we can wrap the text such that the code fits into the size of the window. Go to Code &gt; Soft Wrap Long Lines. I highly recommend you do this, especially if you tend to write a lot of comments in the script file like I do. 1.4.2 Make Notes or Comments In R (and most programming languages), you can write notes or comments in the script to yourself and your readers. This is done by starting the line with a # sign. Please make liberal use of comments. I cannot tell you how many times comments have helped me understand what Im doing and why. Your future self will thank you. Trust me. 1.4.3 Style Guide I strongly believe that people should be able to reproduce each others analyses. This provides the checks and balances that is important for science to advance. Therefore, you should be willing and able to share your code. But even if you do share your code, if it is unintelligible, it will not be of much help. Therefore, to make your code understandable, in addition to writing comments in the script, you should also follow certain conventions when writing code. These conventions are laid out in the tidyverse Style Guide. You can read the Style Guide here: https://style.tidyverse.org/syntax.html. 1.4.4 Setting working directory Typically when we analyse data, we need to reference external files (e.g., our data files). To tell R where to look for those data files, we need to specify the full file path (i.e., the file location). While this is fine if you only have one or two things to reference, it can be kind of tedious to keep typing the file path if you have many things to reference. Furthermore, if you choose to change your file location, it would be quite a hassle (and also error-prone) to have to update all those file paths in the script. What we can do instead is to set a working directory in R using the function setwd(). This tells R where your data files are stored for the session, so it will know to look there. It will also be the place that R saves any output (e.g., plots). To get the file location in Windows, we first go to the folder where the file is located, right-click on the address bar, and click Copy address as text. We then need to convert the backslashes in the file path to forward slashes before we can use it. Lets say the file path is C:\\Users\\Win10\\Desktop\\R. After converting all the backslashes to forward slashes, the file path to use is C:/Users/Win10/Desktop/R. In macOS, there are several ways to get the file path. For instructions, please visit this website: https://www.dev2qa.com/how-to-get-file-path-in-mac/. Note that the file paths in macOS already use forward slashes, so changing backslashes to forward slashes is not an issue for macOS users. After getting the file path, you can then set the working directory as follows, with the file path encased in open/close inverted commas, within the parentheses. # Set working directory setwd(&quot;C:/Users/Win10/Desktop/R&quot;) 1.4.5 Using R Projects While setting the working directory manually is sufficient when we have one or two projects, many of us have multiple projects on-going at the same time. If we have a bunch of different files from different projects all strewn in a single directory (folder), it can get quite messy. To stay organised, it is best that we create an R project for each project we are working on. To do this, go to File &gt; New Project. A dialogue window with three options, New Directory, Existing Directory and Version Control, will appear. Select New Directory, followed by New Project. After RStudio has created the project, it will change the working directory to the project directory so that you can access all the files (e.g., data, script) related to this project in this directory. RStudio will also create a file with the extension .Rproj in the project directory. When you open this file, RStudio will automatically start a new session with the project directory as your working directory. While it is not absolutely necessary to use RStudio projects in this course, I recommend it because it will help keep you organized. 1.4.6 Debugging When you are programming, you will make errors (bugs) in your code. Trying to figure out where you made the error (debugging) can be extremely time-consuming and frustrating. To help you along, here are some of the most common bugs that youll run into. Misspelled object or function Misspelled object will throw this error message: Error: object not found Misspelled function will throw this error message: Error: could not find function R is case-sensitive. So if your object is called Data, you need to type Data and not data, else it will throw an error message. Punctuation mistake Remember to close the parenthesis () Dont add a space where there shouldnt be. For example, if your object is called datafile, dont type data file. Use the correct punctuation for the function. For example, if the function requires a comma, dont put in full stops. If it requires a double equal sign, dont put in a single equal sign. Congrats! Youve now installed R and RStudio! Youre now ready to move on to some basics! =D "],["basics.html", "2 Basics 2.1 Some Basic Commands 2.2 Typing and Executing Commands 2.3 Entering Data Directly Into R", " 2 Basics 2.1 Some Basic Commands Before typing commands into the script editor, it might be useful for you to know some of the following basic commands. To place a comment in the script file, begin the line with #. To run (execute) a line in the script file, place the cursor on the line, hit Ctrl + Enter (Windows) or Cmd + Enter (macOS). If we typed the command directly into the console, we only need to hit Enter To run multiple lines in the script file, select the lines, hit Ctrl + Enter (Windows) or Cmd + Enter (macOS). To clear the console when it becomes too messy, hit Ctrl + L (Windows) or Cmd + L (macOS). To request help, type a question mark in front of the command or the package name (e.g., ?cor). Information about the command will appear in the Help tab (lower right pane). 2.2 Typing and Executing Commands Now, lets actually get R to do stuff for us! Open a script file (Ctrl/CMD + Shift + N). Then copy and paste the following R codes into the script file. Run each line (Ctrl/Cmd + Enter) to see what they do. Note that # denotes a comment, and therefore it will run as a line of text. Experiment and have fun! # Assign a single value (e.g., 9) to an object, say x. x &lt;- 9 # this means &quot;x gets the value of 9&quot;. # Get the value for x. x # remember that R is case-sensitive. If you typed X, you&#39;ll get an error message. X # see how R complains here that it can&#39;t find the object? # If you want to know what objects are in the workspace (i.e., R&#39;s memory), look at the Environment tab or type ls(). ls() # You may remove an object (e.g., x) from the workspace using rm(), where rm stands for remove. rm(x) # If there are too many objects in the workspace, you may remove all objects from the workspace using rm(list=ls()). rm(list = ls()) # Assign a non-numerical value by putting the value in quotation marks. y &lt;- &quot;hello!&quot; # Get the value of y. Notice the value of y is in quotation marks, indicating it is a non-numerical value. y # Perform the following mathematical operations in R. 11 + 10 11 - 10 11 * 10 11 / 10 11 ^ 10 11 ^ (1/2) sqrt(11) # this number should be the same as above line log(11) # taking natural log (log base e) log10(11) # taking log base 10 exp(11) # taking the exponential # Perform mathematical operations in R with an object (e.g., a). a &lt;- 11 # a gets the value of 11 a + 10 a - 10 a * 10 a / 10 a ^ (1/2) sqrt(a) log(a) log10(a) exp(a) # Perform mathematical operations with more than one object. y &lt;- 2 # notice that 2 now replaces the value hello. a + y a - y a * y a / y a ^ (1/y) # You cannot perform mathematical operations with non-numerical objects. b &lt;- &quot;1&quot; # recall, putting things in between quotation marks makes it non-numerical, even if 1 is a number. a + b # you get an error here because you cannot perform mathematical operations with non-numerical objects. # An object can store more than one value, such as a set of numbers or a set of characters. This is known as a vector and can be created using c(). num_vector &lt;- c(1, 2, 3, 4, 5) # numeric vector fruits &lt;- c(&quot;apple&quot;, &quot;banana&quot;, &quot;orange&quot;) # non-numeric vector # Get the values stored in the vectors num_vector fruits # You can do mathematical operations with numerical vectors but not with non-numerical vectors. num_vector * 5 # each value in num_vector is multiplied by 5 fruits * 5 # this throws an error that tells you that you cannot use non-numeric values for this operation 2.3 Entering Data Directly Into R In reality, we rarely use R to do such simple mathematical calculations; we use R for data analyses. But before we can conduct any analysis, we need to give R some data. One way is to key the data directly into R. Lets say we have three people, Bob, Andrea, and Calvin. We have their ages, the number of children each of them has, and their gender. Name Age No. of Children Gender Bob 48 1 Male Andrea 47 3 Female Calvin 49 2 Male Lets figure out how to give R this set of data. First, we create an object name, and assign the three peoples names to it. name &lt;- c(&quot;Bob&quot;, &quot;Andrea&quot;, &quot;Calvin&quot;) # notice the names are between quotation marks # this tells R that name is a string (non-numerical) variable If we type name into the console, we should get: ## [1] &quot;Bob&quot; &quot;Andrea&quot; &quot;Calvin&quot; Next, we create the object age, with the three peoples ages. age &lt;- c(48, 47, 49) # notice the order of age should match the order of the names If we type age into the console, we should get: ## [1] 48 47 49 Now, lets combine the two variables into a data frame, which we will call data, such that each row in data represents the information for one person, and name and age are in side-by-side columns by using the data.frame() function. data &lt;- data.frame(Name = name, Age = age) # Name = name tells R that the variable name should have the header Name. # Age = age tells R that the variable age should have the header Age. Type data into the console. You should see: ## Name Age ## 1 Bob 48 ## 2 Andrea 47 ## 3 Calvin 49 Notice that the output has the Name and the Age columns. Name lists the names of the three individuals. Age lists the ages of the three individuals. The values of Name and Age in the data frame were copied from the original objects. This means that the original objects, name and age, are still in Rs memory. You can see that this is the case from the Environment tab or when you use the ls() function. ## [1] &quot;age&quot; &quot;data&quot; &quot;name&quot; Lets remove the original variables name and age. rm(name) rm(age) Now, when you type ls() into the console, youll see that all is left is the data frame, data. ## [1] &quot;data&quot; If we want to use the variables in the data frame data, we need to attach data$ (a dollar sign after the name of the data frame) before the variable name. For example, if we want to know the ages of the three participants: data$Age ## [1] 48 47 49 # remember that R is case-sensitive. So if you&#39;d typed data$age, you&#39;ll get an error. Lets say we have more variables to add to the data frame data: the number of children the person has and the persons gender. Lets label the number of children each person has as Children and the gender of each person as Gender. data$Children &lt;- c(1, 3, 2) data$Gender &lt;- c(&quot;male&quot;, &quot;female&quot;, &quot;male&quot;) # again, notice the order of Children and Gender should match the order of the names Now, when you type data into the console, youll get: ## Name Age Children Gender ## 1 Bob 48 1 male ## 2 Andrea 47 3 female ## 3 Calvin 49 2 male Note that we created Children and Gender within the data frame. So if you type Children and Gender without data$, you will get an error message in the console telling you that the object cannot be found. Now, lets say we made a mistake and need to remove Children from the data frame, data. We can type: data$Children &lt;- NULL # assign the value of NULL to data$Children data ## Name Age Gender ## 1 Bob 48 male ## 2 Andrea 47 female ## 3 Calvin 49 male # notice that the Children column is now gone Finally, if we want to save the data frame into a .csv file, we use write.csv(). write.csv(data, &quot;bobandreacalvin.csv&quot;) # specify the name and extension of the file (bobandreacalvin.csv). The .csv file will now be saved as bobandreacalvin.csv within your current directory. If you use an R project, it will be saved in your project directory. Otherwise, it will be in your default directory. If you dont know what the directory is, type getwd() into the console. (Although If youd read my instructions earlier, you would have set the working directory using setwd() already so this would not be necessary!) And now that you know some basics, lets move on to installing and using one of the most useful packagesdplyr from tidyverse! "],["tidyverse.html", "3 Using tidyverse 3.1 Installing and Loading tidyverse 3.2 Import Data 3.3 Factors 3.4 Data wrangling with dplyr", " 3 Using tidyverse The tidyverse is a collection of R packages that many data analysts use. In this course, we will be heavily relying on a few of the packages such as readr, dplyr and ggplot2 that are in this collection. Instead of installing each package separately as we normally would, we can simply install tidyverse and that would install all the other packages that we want. 3.1 Installing and Loading tidyverse To install tidyverse, use the function install.packages(). install.packages(&quot;tidyverse&quot;) Although we have installed tidyverse, we cannot use it unless we load it. To load it, we need the library() function. library(tidyverse) Note. You can temporarily load a package without using the library() function using the notation package::function. This tells R to load the package for a specific chunk of code and not for the entire session. This allows anyone who reads the code to know which package the function comes from. I typically dont do this because it can be quite tiresome to keep typing the name of the package over and over. However, package::function comes in especially handy when we want to help R distinguish between two packages with the same function names. For example, the packages ggplot2 and psych both have a function alpha(). R doesnt know which package to choose if you have both packages loaded. So, to specify that you want to use the function from the psych package, you should type psych::alpha(). Now that we have tidyverse loaded, lets do stuff with it. Lets start with importing data. 3.2 Import Data Usually, R users do not have to enter their data into R directly. Instead, they already have their dataset in various formats, such as .csv, .txt, .sav, .xlsx, etc. So what they need to do is to import the dataset into R. In this class, I will use .csv files. To import .csv files, we can use the read_csv() function from the readr package in tidyverse. I have created a hypothetical dataset for my examples here. To follow along, please download the dataset here: SWB.csv. In this hypothetical dataset, 343 participants provided demographic information and responded to the Materialism Values Survey (MVS) and the Satisfaction with Life Scale in 2019 (SWLS2019). The same participants were asked to respond to the Satisfaction with Life Scale in 2021 (SWLS2021). The legend for this dataset is as follows: Variable Name Variable Label Value Label pin participant identification number gender gender 0 = male, 1 = female marital_status marital status 1 = married, 2 = divorced, 3 = widowed have_children parental status 0 = no children, 1 = have children mvs_1 My life would be better if I own certain things I dont have. 1 = strongly disagree, 2 = disagree, 3 = neither disagree nor agree, 4 = agree, 5 = strongly agree mvs_2 The things I own say a lot about how well Im doing. 1 = strongly disagree, 2 = disagree, 3 = neither disagree nor agree, 4 = agree, 5 = strongly agree mvs_3 Id be happier if I could afford to buy more things. 1 = strongly disagree, 2 = disagree, 3 = neither disagree nor agree, 4 = agree, 5 = strongly agree mvs_4 It bothers me that I cant afford to buy things Id like. 1 = strongly disagree, 2 = disagree, 3 = neither disagree nor agree, 4 = agree, 5 = strongly agree mvs_5 Buying things gives me a lot of pleasure. 1 = strongly disagree, 2 = disagree, 3 = neither disagree nor agree, 4 = agree, 5 = strongly agree mvs_6 I admire people who own expensive homes, cars, clothes. 1 = strongly disagree, 2 = disagree, 3 = neither disagree nor agree, 4 = agree, 5 = strongly agree mvs_7 I like to own things that impress people. 1 = strongly disagree, 2 = disagree, 3 = neither disagree nor agree, 4 = agree, 5 = strongly agree mvs_8 I like a lot of luxury in my life. 1 = strongly disagree, 2 = disagree, 3 = neither disagree nor agree, 4 = agree, 5 = strongly agree mvs_9 I try to keep my life simple, as far as possessions are concerned. (R) 1 = strongly disagree, 2 = disagree, 3 = neither disagree nor agree, 4 = agree, 5 = strongly agree swls2019_1 In most ways my life is close to my ideal. (2019) 1 = strongly disagree, 2 = disagree, 3 = slightly disagree, 4 = neither disagree nor agree, 5 = slightly agree, 6 = agree, 7 = strongly agree swls2019_2 The conditions of my life are excellent. (2019) 1 = strongly disagree, 2 = disagree, 3 = slightly disagree, 4 = neither disagree nor agree, 5 = slightly agree, 6 = agree, 7 = strongly agree swls2019_3 I am satisfied with my life. (2019) 1 = strongly disagree, 2 = disagree, 3 = slightly disagree, 4 = neither disagree nor agree, 5 = slightly agree, 6 = agree, 7 = strongly agree swls2019_4 So far I have gotten the important things I want in life. (2019) 1 = strongly disagree, 2 = disagree, 3 = slightly disagree, 4 = neither disagree nor agree, 5 = slightly agree, 6 = agree, 7 = strongly agree swls2019_5 In most ways my life is close to my ideal. (2019) 1 = strongly disagree, 2 = disagree, 3 = slightly disagree, 4 = neither disagree nor agree, 5 = slightly agree, 6 = agree, 7 = strongly agree swls2021_1 In most ways my life is close to my ideal. (2021) 1 = strongly disagree, 2 = disagree, 3 = slightly disagree, 4 = neither disagree nor agree, 5 = slightly agree, 6 = agree, 7 = strongly agree swls2021_2 The conditions of my life are excellent. (2021) 1 = strongly disagree, 2 = disagree, 3 = slightly disagree, 4 = neither disagree nor agree, 5 = slightly agree, 6 = agree, 7 = strongly agree swls2021_3 I am satisfied with my life. (2021) 1 = strongly disagree, 2 = disagree, 3 = slightly disagree, 4 = neither disagree nor agree, 5 = slightly agree, 6 = agree, 7 = strongly agree swls2021_4 So far I have gotten the important things I want in life. (2021) 1 = strongly disagree, 2 = disagree, 3 = slightly disagree, 4 = neither disagree nor agree, 5 = slightly agree, 6 = agree, 7 = strongly agree swls2021_5 In most ways my life is close to my ideal. (2021) 1 = strongly disagree, 2 = disagree, 3 = slightly disagree, 4 = neither disagree nor agree, 5 = slightly agree, 6 = agree, 7 = strongly agree Lets read in the .csv file. data &lt;- read_csv(&quot;SWB.csv&quot;) # this code is saying... # read in the .csv file, &quot;SWB.csv&quot; and assign it to &quot;data&quot; # from now on, &quot;data&quot; will refer to the data in this csv file You may also use the built-in R function read.csv(). If you do so, you dont have to load the tidyverse package. data &lt;- read.csv(&quot;SWB.csv&quot;) read.csv() is supposedly slower than read_csv(), which in turn is slower than data.tables fread(). For our purposes, though, it really doesnt matter which you use, so long as you can successfully import the data file. If you have other file types, such as .txt, .sav, .xlsx, you might need different packages. For example, for excel files (.xlsx), you will need the readxl package. For SPSS (.sav), you will need the haven package or the foreign package. For this class, I wont use file types aside from .csv, but it is good to be aware of the packages to use if you want to import other file types. 3.2.1 Check Imported Dataset Before conducting any analyses, check that the dataset has been imported correctly. Go to the Environment pane (top right pane). Click data. The top left pane should show the imported data. Alternatively, you may type View(data) into the console. Rows: The data for each participant is recorded in a single row (e.g., data for Participant 1 is in Row 1) Columns: The data for each variable is recorded in a single column. Names of the variables are in the headers for each column Scroll down to ensure all rows have been imported correctly. There should be 343 rows. Scroll right to ensure all columns have been imported correctly. There should be 23 columns. Another way to check the imported dataset is using the str() or the glimpse() functions. Both give you roughly similar information (e.g., that there are 343 rows and 23 columns, the names of the variables, the values for the first 10 or so participants) str(data) ## spec_tbl_df [343 x 23] (S3: spec_tbl_df/tbl_df/tbl/data.frame) ## $ pin : num [1:343] 1 2 3 4 5 6 7 8 9 10 ... ## $ gender : num [1:343] 0 1 1 1 1 0 1 0 1 0 ... ## $ marital_status: num [1:343] 1 1 3 1 2 1 2 1 2 1 ... ## $ have_children : num [1:343] 0 1 0 0 0 1 0 0 0 1 ... ## $ mvs_1 : num [1:343] 4 4 5 2 2 3 2 2 3 2 ... ## $ mvs_2 : num [1:343] 3 3 4 3 2 4 3 3 4 3 ... ## $ mvs_3 : num [1:343] 3 3 4 3 3 4 3 3 4 3 ... ## $ mvs_4 : num [1:343] 3 3 3 2 2 5 4 4 3 4 ... ## $ mvs_5 : num [1:343] 3 3 4 3 3 4 3 3 4 2 ... ## $ mvs_6 : num [1:343] 4 4 5 2 2 3 4 4 5 2 ... ## $ mvs_7 : num [1:343] 3 2 4 2 3 3 3 3 4 3 ... ## $ mvs_8 : num [1:343] 4 4 5 4 4 5 3 3 4 3 ... ## $ mvs_9 : num [1:343] 2 2 1 3 3 2 3 3 2 4 ... ## $ swls2019_1 : num [1:343] 4 5 4 6 5 5 2 4 5 5 ... ## $ swls2019_2 : num [1:343] 4 6 4 5 4 4 3 3 5 5 ... ## $ swls2019_3 : num [1:343] 5 5 4 7 4 4 3 3 5 5 ... ## $ swls2019_4 : num [1:343] 5 6 5 6 4 5 3 3 4 6 ... ## $ swls2019_5 : num [1:343] 4 6 5 5 5 4 3 3 5 6 ... ## $ swls2021_1 : num [1:343] 4 4 3 5 4 5 2 4 4 5 ... ## $ swls2021_2 : num [1:343] 4 6 3 5 3 4 2 3 4 5 ... ## $ swls2021_3 : num [1:343] 5 4 4 6 4 3 4 3 5 4 ... ## $ swls2021_4 : num [1:343] 5 5 5 6 4 4 3 3 4 5 ... ## $ swls2021_5 : num [1:343] 4 5 5 5 5 4 3 3 5 6 ... ## - attr(*, &quot;spec&quot;)= ## .. cols( ## .. pin = col_double(), ## .. gender = col_double(), ## .. marital_status = col_double(), ## .. have_children = col_double(), ## .. mvs_1 = col_double(), ## .. mvs_2 = col_double(), ## .. mvs_3 = col_double(), ## .. mvs_4 = col_double(), ## .. mvs_5 = col_double(), ## .. mvs_6 = col_double(), ## .. mvs_7 = col_double(), ## .. mvs_8 = col_double(), ## .. mvs_9 = col_double(), ## .. swls2019_1 = col_double(), ## .. swls2019_2 = col_double(), ## .. swls2019_3 = col_double(), ## .. swls2019_4 = col_double(), ## .. swls2019_5 = col_double(), ## .. swls2021_1 = col_double(), ## .. swls2021_2 = col_double(), ## .. swls2021_3 = col_double(), ## .. swls2021_4 = col_double(), ## .. swls2021_5 = col_double() ## .. ) ## - attr(*, &quot;problems&quot;)=&lt;externalptr&gt; glimpse(data) ## Rows: 343 ## Columns: 23 ## $ pin &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, ~ ## $ gender &lt;dbl&gt; 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0~ ## $ marital_status &lt;dbl&gt; 1, 1, 3, 1, 2, 1, 2, 1, 2, 1, 3, 2, 3, 3, 3, 1, 1, 1, 3~ ## $ have_children &lt;dbl&gt; 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0~ ## $ mvs_1 &lt;dbl&gt; 4, 4, 5, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 3, 3, 3, 4, 3~ ## $ mvs_2 &lt;dbl&gt; 3, 3, 4, 3, 2, 4, 3, 3, 4, 3, 2, 4, 1, 3, 2, 3, 2, 4, 3~ ## $ mvs_3 &lt;dbl&gt; 3, 3, 4, 3, 3, 4, 3, 3, 4, 3, 3, 4, 2, 2, 3, 4, 4, 5, 3~ ## $ mvs_4 &lt;dbl&gt; 3, 3, 3, 2, 2, 5, 4, 4, 3, 4, 4, 4, 2, 2, 4, 3, 3, 4, 4~ ## $ mvs_5 &lt;dbl&gt; 3, 3, 4, 3, 3, 4, 3, 3, 4, 2, 2, 3, 3, 3, 4, 4, 4, 5, 3~ ## $ mvs_6 &lt;dbl&gt; 4, 4, 5, 2, 2, 3, 4, 4, 5, 2, 2, 3, 3, 3, 4, 2, 2, 3, 4~ ## $ mvs_7 &lt;dbl&gt; 3, 2, 4, 2, 3, 3, 3, 3, 4, 3, 1, 4, 4, 1, 5, 1, 3, 2, 3~ ## $ mvs_8 &lt;dbl&gt; 4, 4, 5, 4, 4, 5, 3, 3, 4, 3, 3, 4, 2, 2, 3, 3, 3, 4, 4~ ## $ mvs_9 &lt;dbl&gt; 2, 2, 1, 3, 3, 2, 3, 3, 2, 4, 4, 3, 4, 4, 3, 3, 3, 2, 3~ ## $ swls2019_1 &lt;dbl&gt; 4, 5, 4, 6, 5, 5, 2, 4, 5, 5, 5, 3, 4, 5, 4, 5, 5, 6, 4~ ## $ swls2019_2 &lt;dbl&gt; 4, 6, 4, 5, 4, 4, 3, 3, 5, 5, 5, 4, 3, 5, 4, 4, 4, 6, 5~ ## $ swls2019_3 &lt;dbl&gt; 5, 5, 4, 7, 4, 4, 3, 3, 5, 5, 4, 4, 3, 4, 3, 4, 4, 5, 4~ ## $ swls2019_4 &lt;dbl&gt; 5, 6, 5, 6, 4, 5, 3, 3, 4, 6, 4, 4, 4, 5, 4, 4, 5, 6, 4~ ## $ swls2019_5 &lt;dbl&gt; 4, 6, 5, 5, 5, 4, 3, 3, 5, 6, 5, 4, 3, 4, 3, 5, 5, 6, 4~ ## $ swls2021_1 &lt;dbl&gt; 4, 4, 3, 5, 4, 5, 2, 4, 4, 5, 5, 2, 3, 5, 4, 4, 5, 6, 4~ ## $ swls2021_2 &lt;dbl&gt; 4, 6, 3, 5, 3, 4, 2, 3, 4, 5, 4, 3, 2, 4, 3, 4, 4, 6, 4~ ## $ swls2021_3 &lt;dbl&gt; 5, 4, 4, 6, 4, 3, 4, 3, 5, 4, 4, 4, 3, 4, 2, 3, 3, 4, 4~ ## $ swls2021_4 &lt;dbl&gt; 5, 5, 5, 6, 4, 4, 3, 3, 4, 5, 4, 4, 4, 5, 3, 3, 4, 5, 4~ ## $ swls2021_5 &lt;dbl&gt; 4, 5, 5, 5, 5, 4, 3, 3, 5, 6, 5, 4, 3, 4, 3, 4, 5, 6, 4~ 3.3 Factors When you look at the output from str(data) or glimpse(data), you can see that some values dont seem to make sense on their own. For example, what do 0 and 1 in gender mean? From the legend table produced earlier, we can see that 0 stands for male and 1 stands for female. But having to consult the table every time we do an analysis is tiresome and also error-prone. So, we use the factor() command to tell R what those values mean for categorical variables. data$gender &lt;- factor(data$gender, levels = c(0, 1), labels = c(&quot;male&quot;, &quot;female&quot;)) # Here, level 0 = label male, level 1 = label female # Also notice that male and female are enclosed in quotation marks because these are string variables. # Check that gender is now a factor glimpse(data$gender) ## Factor w/ 2 levels &quot;male&quot;,&quot;female&quot;: 1 2 2 2 2 1 2 1 2 1 ... 3.4 Data wrangling with dplyr What should we do after importing a dataset? Well, there are many things we can do! We might want to, say, select specific columns to analyse. Or, we might only want to look at specific participants. Or we might want to create new variables from existing ones. All of these is made possible with functions in the dplyr package in tidyverse. The functions we will use in this class from the dplyr package are as follows: dplyr functions Description select() select specific columns filter() filter (keep, select) specific rows mutate() create new columns summarise() summarise values group_by() apply operations to different groups There are more functions in the dplyr package! Check out the dplyr cheat sheet here: https://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf. Now, lets go through the five listed above. 3.4.1 Select() The select() function allows us to select specific columns. This is especially useful if we have many columns to work with and we only want to focus on a few. Lets say we only want to select gender and the swls2019_1 to swls2019_5 columns in the SWB dataset. Heres how we would do it: swls2019_only &lt;- data %&gt;% # create the subset called &quot;swls2019_only&quot; from &quot;data&quot; select(gender, swls2019_1:swls2019_5) # and select only gender and the columns swls2019_1 to swls2019_5 This is what the first six rows of swls2019_only should look like: ## # A tibble: 6 x 6 ## gender swls2019_1 swls2019_2 swls2019_3 swls2019_4 swls2019_5 ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 male 4 4 5 5 4 ## 2 female 5 6 5 6 6 ## 3 female 4 4 4 5 5 ## 4 female 6 5 7 6 5 ## 5 female 5 4 4 4 5 ## 6 male 5 4 4 5 4 I sometimes also use select() to re-arrange the order of the columns. (In dplyr, the specific function to re-arrange the order of the columns is arrange(). arrange() allows us to re-arrange rows in addition to columns.) So, lets say we want the swls2019_1 to swls2019_5 columns to come before gender. We simply list the swls2019_1 to swls2019_5 columns before gender. swls2019_genderlast &lt;- data %&gt;% select(swls2019_1:swls2019_5, gender) This is what the first six rows of swls2019_genderlast should look like: ## # A tibble: 6 x 6 ## swls2019_1 swls2019_2 swls2019_3 swls2019_4 swls2019_5 gender ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; ## 1 4 4 5 5 4 male ## 2 5 6 5 6 6 female ## 3 4 4 4 5 5 female ## 4 6 5 7 6 5 female ## 5 5 4 4 4 5 female ## 6 5 4 4 5 4 male 3.4.2 Filter() Maybe we dont want to select specific columns. Instead, we want to select specific kinds of participants to conduct our analyses on (e.g., say from specific treatment groups, or maybe only male participants). We use filter() to do that. New R users sometimes confuse select() with filter(). Heres how to differentiate the two: select() is used to select columns (i.e., variables) whereas filter() is used to select rows (i.e., participants). So, lets say we want to select only male participants. male_only &lt;- data %&gt;% # create &quot;male_only&quot; subset from &quot;data&quot;, filter(gender == &quot;male&quot;) # then filter (keep) only male participants Notice that the double equal sign == is used here. In programming languages, the == sign is used when we are comparing the left and the right hand side. Here, were comparing each row of the column gender to the word male. If that row matches the word male, we will filter (keep) that row. Otherwise, we will toss it out. This is what the first six rows of male_only should look like: ## # A tibble: 6 x 23 ## pin gender marital_status have_children mvs_1 mvs_2 mvs_3 mvs_4 mvs_5 mvs_6 ## &lt;dbl&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 male 1 0 4 3 3 3 3 4 ## 2 6 male 1 1 3 4 4 5 4 3 ## 3 8 male 1 0 2 3 3 4 3 4 ## 4 10 male 1 1 2 3 3 4 2 2 ## 5 11 male 3 0 2 2 3 4 2 2 ## 6 14 male 3 0 2 3 2 2 3 3 ## # ... with 13 more variables: mvs_7 &lt;dbl&gt;, mvs_8 &lt;dbl&gt;, mvs_9 &lt;dbl&gt;, ## # swls2019_1 &lt;dbl&gt;, swls2019_2 &lt;dbl&gt;, swls2019_3 &lt;dbl&gt;, swls2019_4 &lt;dbl&gt;, ## # swls2019_5 &lt;dbl&gt;, swls2021_1 &lt;dbl&gt;, swls2021_2 &lt;dbl&gt;, swls2021_3 &lt;dbl&gt;, ## # swls2021_4 &lt;dbl&gt;, swls2021_5 &lt;dbl&gt; 3.4.3 Mutate() Sometimes, we might want to create new variables, say averages or totals. We can do this with mutate(). Lets say we want to find the average of swls2019_1 to swls2019_5 for each participant. We use the subset we created just now, swls2019_only. swls2019_only &lt;- swls2019_only %&gt;% mutate(swls2019_avg = (swls2019_1 + swls2019_2 + swls2019_3 + swls2019_4 + swls2019_5) / 5) The first 6 rows of swls2019_only now looks like this: head(swls2019_only) ## # A tibble: 6 x 7 ## gender swls2019_1 swls2019_2 swls2019_3 swls2019_4 swls2019_5 swls2019_avg ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 male 4 4 5 5 4 4.4 ## 2 female 5 6 5 6 6 5.6 ## 3 female 4 4 4 5 5 4.4 ## 4 female 6 5 7 6 5 5.8 ## 5 female 5 4 4 4 5 4.4 ## 6 male 5 4 4 5 4 4.4 There is another way you can achieve the same results using rowMeans(). swls2019_only &lt;- swls2019_only %&gt;% mutate(swls2019_avg_rowmeans = rowMeans(across(c(swls2019_1:swls2019_5)))) # rowMeans(across(c(swls2019_1:swls2019_5))) tells R that we want to find the mean (average) for each row (hence rowMeans) across the five variables, swls2019_1 to swls2019_5. Lets compare swls2019_avg and swls2019_avg_rowmeans. Notice that the two columns give you the exact same results: ## # A tibble: 6 x 2 ## swls2019_avg swls2019_avg_rowmeans ## &lt;dbl&gt; &lt;dbl&gt; ## 1 4.4 4.4 ## 2 5.6 5.6 ## 3 4.4 4.4 ## 4 5.8 5.8 ## 5 4.4 4.4 ## 6 4.4 4.4 3.4.4 Summarise() The summarise() function is used when we want to get summary statistics such as the mean, median, maximum, minimum, etc for a given column in the data frame. Lets say were interested to know the mean, minimum, maximum, variance, standard deviation, total number of participants for swls2019_avg. Again, we will use our swls2019_only subset. swls2019_only %&gt;% summarise(avg_swls = mean(swls2019_avg), min_swls = min(swls2019_avg), max_swls = max(swls2019_avg), var_swls = var(swls2019_avg), sd_swls = sd(swls2019_avg), total = n()) ## # A tibble: 1 x 6 ## avg_swls min_swls max_swls var_swls sd_swls total ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 4.35 2 6 0.588 0.767 343 3.4.5 Group_by() Sometimes, we might want to apply the same function to different groups of people. For example, we might want to know what the maximum swls score is for males and for females. We can use the group_by() function to do this. Lets say were interested to know the mean, minimum, maximum, variance, standard deviation, total number of participants for the variable swls2019_avg for males and females. . swls2019_only %&gt;% group_by(gender) %&gt;% summarise(avg_swls = mean(swls2019_avg), min_swls = min(swls2019_avg), max_swls = max(swls2019_avg), var_swls = var(swls2019_avg), sd_swls = sd(swls2019_avg), total = n()) ## # A tibble: 2 x 7 ## gender avg_swls min_swls max_swls var_swls sd_swls total ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 male 4.08 3 5.8 0.373 0.611 168 ## 2 female 4.62 2 6 0.657 0.810 175 At this point, you should realise that it is possible to combine different dplyr functions to achieve specific results. I encourage you to play around! Now that youve gotten to this point, I think youre ready to do your first assignment! Proceed to the next section! "],["tha1.html", "4 Assignment 1 4.1 Due Date: DD-MM-YYYY 4.2 Instructions 4.3 Legend 4.4 Check Your Results With Mine", " 4 Assignment 1 4.1 Due Date: DD-MM-YYYY 4.2 Instructions Download the data file here: SWB.csv. Open up a new script file in RStudio using Ctrl/Cmd + Shift + N. Set working directory using setwd(). Load tidyverse using library(). Read in the data file SWB.csv using read_csv() or read.csv(). Examine the dataset with glimpse() or View() or `str(). Convert marital_status and have_children from integer to factor using factor(). Add value labels to the factors. See the legend below to see how each variable is coded. Use glimpse() or str() to check that the variables are indeed converted to factors. Create a subset of the dataset of only married parents (i.e., married people who have children). Further subset the dataset such that only the variables swls2021_1, swls2021_2, swls2021_3, swls2021_4, and swls2021_5 are in the dataset. You should have 68 rows and 5 columns in this subset. Using this subset, compute the average of swls2021_1, swls2021_2, swls2021_3, swls2021_4, and swls2021_5 for each person. Call this variable swls2021_avg. Using this subset, get the following summary statistics for swls2021_avg: maximum, minimum, mean, and sd. Check that the maximum is 5.4, the minimum is 2.6, the mean is 4.18, and the sd is 0.707. For each step above, put in comments using the # sign so that you know what was done. (e.g., # set working directory, # load packages) When youre done with the above, copy and paste your R script into a word document. Submit the word document in the eLearn Assignment for 1 point. 4.3 Legend Variable Name Variable Label Value Label pin participant identification number gender gender 0 = male, 1 = female marital_status marital status 1 = married, 2 = divorced, 3 = widowed have_children parental status 0 = no children, 1 = have children mvs_1 My life would be better if I own certain things I dont have. 1 = strongly disagree, 2 = disagree, 3 = neither disagree nor agree, 4 = agree, 5 = strongly agree mvs_2 The things I own say a lot about how well Im doing. 1 = strongly disagree, 2 = disagree, 3 = neither disagree nor agree, 4 = agree, 5 = strongly agree mvs_3 Id be happier if I could afford to buy more things. 1 = strongly disagree, 2 = disagree, 3 = neither disagree nor agree, 4 = agree, 5 = strongly agree mvs_4 It bothers me that I cant afford to buy things Id like. 1 = strongly disagree, 2 = disagree, 3 = neither disagree nor agree, 4 = agree, 5 = strongly agree mvs_5 Buying things gives me a lot of pleasure. 1 = strongly disagree, 2 = disagree, 3 = neither disagree nor agree, 4 = agree, 5 = strongly agree mvs_6 I admire people who own expensive homes, cars, clothes. 1 = strongly disagree, 2 = disagree, 3 = neither disagree nor agree, 4 = agree, 5 = strongly agree mvs_7 I like to own things that impress people. 1 = strongly disagree, 2 = disagree, 3 = neither disagree nor agree, 4 = agree, 5 = strongly agree mvs_8 I like a lot of luxury in my life. 1 = strongly disagree, 2 = disagree, 3 = neither disagree nor agree, 4 = agree, 5 = strongly agree mvs_9 I try to keep my life simple, as far as possessions are concerned. (R) 1 = strongly disagree, 2 = disagree, 3 = neither disagree nor agree, 4 = agree, 5 = strongly agree swls2019_1 In most ways my life is close to my ideal. (2019) 1 = strongly disagree, 2 = disagree, 3 = slightly disagree, 4 = neither disagree nor agree, 5 = slightly agree, 6 = agree, 7 = strongly agree swls2019_2 The conditions of my life are excellent. (2019) 1 = strongly disagree, 2 = disagree, 3 = slightly disagree, 4 = neither disagree nor agree, 5 = slightly agree, 6 = agree, 7 = strongly agree swls2019_3 I am satisfied with my life. (2019) 1 = strongly disagree, 2 = disagree, 3 = slightly disagree, 4 = neither disagree nor agree, 5 = slightly agree, 6 = agree, 7 = strongly agree swls2019_4 So far I have gotten the important things I want in life. (2019) 1 = strongly disagree, 2 = disagree, 3 = slightly disagree, 4 = neither disagree nor agree, 5 = slightly agree, 6 = agree, 7 = strongly agree swls2019_5 In most ways my life is close to my ideal. (2019) 1 = strongly disagree, 2 = disagree, 3 = slightly disagree, 4 = neither disagree nor agree, 5 = slightly agree, 6 = agree, 7 = strongly agree swls2021_1 In most ways my life is close to my ideal. (2021) 1 = strongly disagree, 2 = disagree, 3 = slightly disagree, 4 = neither disagree nor agree, 5 = slightly agree, 6 = agree, 7 = strongly agree swls2021_2 The conditions of my life are excellent. (2021) 1 = strongly disagree, 2 = disagree, 3 = slightly disagree, 4 = neither disagree nor agree, 5 = slightly agree, 6 = agree, 7 = strongly agree swls2021_3 I am satisfied with my life. (2021) 1 = strongly disagree, 2 = disagree, 3 = slightly disagree, 4 = neither disagree nor agree, 5 = slightly agree, 6 = agree, 7 = strongly agree swls2021_4 So far I have gotten the important things I want in life. (2021) 1 = strongly disagree, 2 = disagree, 3 = slightly disagree, 4 = neither disagree nor agree, 5 = slightly agree, 6 = agree, 7 = strongly agree swls2021_5 In most ways my life is close to my ideal. (2021) 1 = strongly disagree, 2 = disagree, 3 = slightly disagree, 4 = neither disagree nor agree, 5 = slightly agree, 6 = agree, 7 = strongly agree 4.4 Check Your Results With Mine ## Rows: 343 ## Columns: 23 ## $ pin &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, ~ ## $ gender &lt;dbl&gt; 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0~ ## $ marital_status &lt;dbl&gt; 1, 1, 3, 1, 2, 1, 2, 1, 2, 1, 3, 2, 3, 3, 3, 1, 1, 1, 3~ ## $ have_children &lt;dbl&gt; 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0~ ## $ mvs_1 &lt;dbl&gt; 4, 4, 5, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 3, 3, 3, 4, 3~ ## $ mvs_2 &lt;dbl&gt; 3, 3, 4, 3, 2, 4, 3, 3, 4, 3, 2, 4, 1, 3, 2, 3, 2, 4, 3~ ## $ mvs_3 &lt;dbl&gt; 3, 3, 4, 3, 3, 4, 3, 3, 4, 3, 3, 4, 2, 2, 3, 4, 4, 5, 3~ ## $ mvs_4 &lt;dbl&gt; 3, 3, 3, 2, 2, 5, 4, 4, 3, 4, 4, 4, 2, 2, 4, 3, 3, 4, 4~ ## $ mvs_5 &lt;dbl&gt; 3, 3, 4, 3, 3, 4, 3, 3, 4, 2, 2, 3, 3, 3, 4, 4, 4, 5, 3~ ## $ mvs_6 &lt;dbl&gt; 4, 4, 5, 2, 2, 3, 4, 4, 5, 2, 2, 3, 3, 3, 4, 2, 2, 3, 4~ ## $ mvs_7 &lt;dbl&gt; 3, 2, 4, 2, 3, 3, 3, 3, 4, 3, 1, 4, 4, 1, 5, 1, 3, 2, 3~ ## $ mvs_8 &lt;dbl&gt; 4, 4, 5, 4, 4, 5, 3, 3, 4, 3, 3, 4, 2, 2, 3, 3, 3, 4, 4~ ## $ mvs_9 &lt;dbl&gt; 2, 2, 1, 3, 3, 2, 3, 3, 2, 4, 4, 3, 4, 4, 3, 3, 3, 2, 3~ ## $ swls2019_1 &lt;dbl&gt; 4, 5, 4, 6, 5, 5, 2, 4, 5, 5, 5, 3, 4, 5, 4, 5, 5, 6, 4~ ## $ swls2019_2 &lt;dbl&gt; 4, 6, 4, 5, 4, 4, 3, 3, 5, 5, 5, 4, 3, 5, 4, 4, 4, 6, 5~ ## $ swls2019_3 &lt;dbl&gt; 5, 5, 4, 7, 4, 4, 3, 3, 5, 5, 4, 4, 3, 4, 3, 4, 4, 5, 4~ ## $ swls2019_4 &lt;dbl&gt; 5, 6, 5, 6, 4, 5, 3, 3, 4, 6, 4, 4, 4, 5, 4, 4, 5, 6, 4~ ## $ swls2019_5 &lt;dbl&gt; 4, 6, 5, 5, 5, 4, 3, 3, 5, 6, 5, 4, 3, 4, 3, 5, 5, 6, 4~ ## $ swls2021_1 &lt;dbl&gt; 4, 4, 3, 5, 4, 5, 2, 4, 4, 5, 5, 2, 3, 5, 4, 4, 5, 6, 4~ ## $ swls2021_2 &lt;dbl&gt; 4, 6, 3, 5, 3, 4, 2, 3, 4, 5, 4, 3, 2, 4, 3, 4, 4, 6, 4~ ## $ swls2021_3 &lt;dbl&gt; 5, 4, 4, 6, 4, 3, 4, 3, 5, 4, 4, 4, 3, 4, 2, 3, 3, 4, 4~ ## $ swls2021_4 &lt;dbl&gt; 5, 5, 5, 6, 4, 4, 3, 3, 4, 5, 4, 4, 4, 5, 3, 3, 4, 5, 4~ ## $ swls2021_5 &lt;dbl&gt; 4, 5, 5, 5, 5, 4, 3, 3, 5, 6, 5, 4, 3, 4, 3, 4, 5, 6, 4~ ## Factor w/ 3 levels &quot;married&quot;,&quot;divorced&quot;,..: 1 1 3 1 2 1 2 1 2 1 ... ## Factor w/ 2 levels &quot;no&quot;,&quot;yes&quot;: 1 2 1 1 1 2 1 1 1 2 ... ## Rows: 68 ## Columns: 5 ## $ swls2021_1 &lt;dbl&gt; 4, 5, 5, 4, 5, 6, 5, 4, 4, 4, 4, 5, 4, 3, 5, 5, 5, 4, 4, 3,~ ## $ swls2021_2 &lt;dbl&gt; 6, 4, 5, 4, 4, 6, 5, 3, 4, 3, 4, 6, 7, 5, 6, 6, 5, 6, 6, 3,~ ## $ swls2021_3 &lt;dbl&gt; 4, 3, 4, 3, 3, 4, 5, 3, 3, 3, 4, 5, 5, 4, 5, 4, 4, 5, 5, 2,~ ## $ swls2021_4 &lt;dbl&gt; 5, 4, 5, 3, 4, 5, 4, 3, 3, 3, 3, 4, 5, 3, 4, 5, 4, 5, 4, 2,~ ## $ swls2021_5 &lt;dbl&gt; 5, 4, 6, 4, 5, 6, 5, 3, 4, 4, 5, 5, 5, 4, 4, 5, 5, 4, 5, 3,~ ## # A tibble: 1 x 4 ## avg_swls min_swls max_swls sd_swls ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 4.18 2.6 5.4 0.707 "],["tha2.html", "5 Assignment 2", " 5 Assignment 2 Under construction "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
