[["basics.html", "2 Basics 2.1 Some Basic Commands 2.2 Typing and Executing Commands 2.3 Entering Data Directly Into R", " 2 Basics 2.1 Some Basic Commands Before typing commands into the script editor, it might be useful for you to know some of the following basic commands. To place a comment in the script file, begin the line with #. To run (execute) a line in the script file, place the cursor on the line, hit Ctrl + Enter (Windows) or Cmd + Enter (macOS). If we typed the command directly into the console, we only need to hit Enter To run multiple lines in the script file, select the lines, hit Ctrl + Enter (Windows) or Cmd + Enter (macOS). To clear the console when it becomes too messy, hit Ctrl + L (Windows) or Cmd + L (macOS). To request help, type a question mark in front of the command or the package name (e.g., ?cor). Information about the command will appear in the Help tab (lower right pane). 2.2 Typing and Executing Commands Now, lets actually get R to do stuff for us! Copy and paste the following R codes into the Script Editor pane. Run each line (Ctrl/Cmd + Enter) to see what they do. Note that # denotes a comment, and therefore it will run as a line of text. Experiment and have fun! # Assign a single value (e.g., 9) to an object, say x. x &lt;- 9 # this means &quot;x gets the value of 9&quot; # Get the value for x. x # remember that R is case-sensitive. If you typed X, you&#39;ll get an error message. # If you want to know what objects are in the workspace (i.e., R&#39;s memory), look at the Environments tab or type ls(). ls() # You may remove an object (e.g., x) from the workspace. rm(x) # where rm stands for remove # If there are too many objects in the workspace, you may remove all objects from the workspace using rm(list=ls()). rm(list = ls()) # Assign a non-numerical value by putting the value in quotation marks. y &lt;- &quot;hello!&quot; # Get the value of y. Notice the value of y is in quotation marks, indicating it is a non-numerical value. y # Perform the following mathematical operations in R. 11 + 10 11 - 10 11 * 10 11 / 10 11 ^ 10 11 ^ (1/2) sqrt(11) # this number should be the same as above line log(11) # taking natural log (log base e) log10(11) # taking log base 10 exp(11) # taking the exponential # Perform mathematical operations in R with an object (e.g., a). a &lt;- 11 # a gets the value of 11 a + 10 a - 10 a * 10 a / 10 a ^ (1/2) sqrt(a) log(a) log10(a) exp(a) # Perform mathematical operations with more than one object. y &lt;- 2 # notice that 2 now replaces the value hello. a + y a - y a * y a / y a ^ (1/y) # You cannot perform mathematical operations with non-numerical objects. b &lt;- &quot;1&quot; # recall, putting things in between quotation marks makes it non-numerical, even if 1 is a number. a + b # you get an error here because you cannot perform mathematical operations with non-numerical objects. # An object can store more than one value, such as a set of numbers or a set of characters. This is known as a vector and can be created using c(). num_vector &lt;- c(1, 2, 3, 4, 5) # numeric vector fruits &lt;- c(&quot;apple&quot;, &quot;banana&quot;, &quot;orange&quot;) # non-numeric vector # Get the values stored in the vectors num_vector fruits # You can do mathematical operations with numerical vectors but not with non-numerical vectors. num_vector * 5 # each value in num_vector is multiplied by 5 fruits * 5 # this throws an error that tells you that you cannot use non-numeric values for this operation 2.3 Entering Data Directly Into R Before we can conduct any analysis, we need to give R some data. One way is to key the data directly into R. Lets say we have three people, Bob, Andrea, and Calvin. We have their ages, the number of children each of them has, and their gender. Name Age No.Â of Children Gender Bob 48 1 Male Andrea 47 3 Female Calvin 49 2 Male First, we create an object called name, and assign the three peoples names to it. name &lt;- c(&quot;Bob&quot;, &quot;Andrea&quot;, &quot;Calvin&quot;) # notice the names are between quotation marks # this tells R that name is a string (non-numerical) variable If we type name into the console, we should get: ## [1] &quot;Bob&quot; &quot;Andrea&quot; &quot;Calvin&quot; Next, we create the object age, with the three peoples ages. age &lt;- c(48, 47, 49) # notice the order of age should match the order of the names If we type age into the console, we should get: ## [1] 48 47 49 Now, lets combine the two variables into a data frame, such that each row represents data for one person, and name and age are in side-by-side columns by using the data.frame() function. data &lt;- data.frame(Name = name, Age = age) # Name = name tells R that the variable name should have the header Name. # Age = age tells R that the variable age should have the header Age. Type data into the console. You should see: ## Name Age ## 1 Bob 48 ## 2 Andrea 47 ## 3 Calvin 49 Notice that the output has the Name and the Age columns. Name lists the names of the three individuals. Age lists the ages of the three individuals. The values of Name and Age in the data frame were copied from the original objects. This means that the original objects, name and age, are still in Rs memory. You can see that this is the case from the Environment tab or when you use the ls() function. ## [1] &quot;age&quot; &quot;data&quot; &quot;name&quot; Lets remove the original variables name and age. rm(name) rm(age) Now, when you type ls() into the console, youll see that all is left is the data frame, data. ## [1] &quot;data&quot; If we want to use the variables in the data frame data, we need to attach data$ (a dollar sign after the name of the data frame) before the variable name. For example, if we want to know the ages of the three participants: data$Age ## [1] 48 47 49 # remember that R is case-sensitive. So if you&#39;d typed data$age, you&#39;ll get an error. Lets say we have more variables to add to the data frame data: the number of children the person has and the persons gender. Lets label the number of children each person has as Children and the gender of each person as Gender. data$Children &lt;- c(1, 3, 2) data$Gender &lt;- c(&quot;male&quot;, &quot;female&quot;, &quot;male&quot;) Now, when you type data into the console, youll get: ## Name Age Children Gender ## 1 Bob 48 1 male ## 2 Andrea 47 3 female ## 3 Calvin 49 2 male Note that we created Children and Gender within the data frame. So if you type Children and Gender without data$, you will get an error message in the console telling you that the object cannot be found. Now, lets say we made a mistake and need to remove Children from the data frame. You can type: data$Children &lt;- NULL data # the Children column is now gone ## Name Age Gender ## 1 Bob 48 male ## 2 Andrea 47 female ## 3 Calvin 49 male Finally, if we want to save the data frame into a .csv file, we use write.csv(). write.csv(data, &quot;bobandreacalvin.csv&quot;) # specify the name and extension of the file (bobandreacalvin.csv). The .csv file will now be saved as bobandreacalvin.csv within your current directory. If you use an R project, it will be saved in your project directory. Otherwise, it will be in your default directory. If you dont know what the directory is, type getwd() into the console. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
