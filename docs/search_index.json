[["index.html", "PSYC208 Take Home Assignments About This Website", " PSYC208 Take Home Assignments Huey Woon LEE 2022-03-22 About This Website This website contains materials related to the take home assignments used in my PSYC208 Research Methods II class. These assignments are graded on a PASS/FAIL basis. If the assignment is correctly done, the assignment is marked as PASS; otherwise, it is marked as FAIL. Unless there are exceptional circumstances (please inform TA or me), responses submitted after a grace period of 5 minutes will also be graded as FAIL. These take home assignments would not have been possible without the generosity of Dr. Kevin P. McIntyre, who created many of them for the OSL Open Stats Lab. "],["getting-started.html", "1 Getting Started 1.1 Install R and RStudio 1.2 The RStudio Interface 1.3 R Script 1.4 Some Basic Commands 1.5 Typing and Executing Commands 1.6 Some Tips and Tricks 1.7 Entering Data Directly Into R", " 1 Getting Started To complete the take home assignments, you need both R and RStudio. These are different programmes. I think of R as the software that executes our commands and RStudio as the interface between us and R that makes interacting with R a much more pleasant experience. RStudio has many nifty features, like the spellchecker and the keyboard shortcuts that make writing code much faster and easier. For the sake of your sanity, I strongly recommend you download both programmes! 1.1 Install R and RStudio Install R For Windows Open an internet browser and go to https://cloud.r-project.org/. Under Download and Install R, Click on Download R for Windows. Click on base. Download the latest release by saving the .exe file on your computer. Double-click the file and follow the installation instructions. For macOS Open an internet browser and go to https://cloud.r-project.org/. Under Download and Install R, click on Download R for macOS. Download the latest release by saving the .pkg file to your computer. Double-click the file and follow the installation instructions. Install RStudio Now that R is installed, download and install RStudio. Go to https://www.rstudio.com/products/rstudio/download/. Click Download under RStudio Desktop. Click on the version recommended for your system, or the latest Windows / macOS version, and save the file. Double-click the file and follow the installation instructions. 1.2 The RStudio Interface Now, start up RStudio. You should see something like this: Figure 1.1: R Studio Interface With Three Panes When you start up RStudio, you will see three panes: the R console, the workspace, and the files, plots, packages, help, and viewer pane. Each pane serves different purposes. R console: The R console is where commands are submitted to R for R to execute. It is also where we find some of the output from R (e.g., analysis results). Workspace: I think of this as Rs short-term memory. There are two tabs that are particularly useful. Environment tab: We can find the list of objects (e.g., variables) that we created in the session here. History tab: Here is where we can find all the previous commands we submitted to R in the session. Files, plots, packages, help, and viewer: Files: We can create new folders on our computer, move, delete, and rename files here. Plots: We can find all the plots we instructed R to produce during the session here. Packages: We can find, install, and update packages. Packages contain functions that other people have created to supplement those in R. We will talk more about specific packages later. Help: We can find information about a given command or package. We can also find more information about various commands and the packages on this website: https://www.rdocumentation.org/ Note. Because the Terminal tab, the Connections tab, and the Viewer tab will not be used in this course, I will not talk about them. 1.3 R Script To get R to do stuff (e.g., conduct analyses), we submit commands to R through RStudio. Although we can type the commands directly into the console, R users prefer to type the commands into what is called the script editor because we can save the commands in the script editor into script files (with the extension .R). The script files allow us to keep long-term records of the analyses that we have conducted. We can also share the script files with other R users so that they can replicate our analyses. (In this class, I will use command and code interchangeably.) To open a blank R script, go to File &gt; New File &gt; R Script. Or, you can use the shortcut Ctrl + Shift + N (Windows) or Cmd + Shift + N (macOS). Notice now, your RStudio has four panes. The script editor now takes up the top half of the left hand side of the screen. Figure 1.2: R Studio With Four Panes 1.4 Some Basic Commands Before typing commands into the script editor, it might be useful for you to know some of the following basic commands. To place a comment in the script file, begin the line with #. To run (execute) a line in the script file, place the cursor on the line, hit Ctrl + Enter (Windows) or Cmd + Enter (macOS). If we typed the command directly into the console, we only need to hit Enter To run multiple lines in the script file, select the lines, hit Ctrl + Enter (Windows) or Cmd + Enter (macOS). To clear the console when it becomes too messy, hit Ctrl + L (Windows) or Cmd + L (macOS). To request help, type a question mark in front of the command or the package name (e.g., ?cor). Information about the command will appear in the Help tab (lower right pane). 1.5 Typing and Executing Commands Now, lets actually get R to do stuff for us! Copy and paste the following R codes into the Script Editor pane. Run each line (Ctrl/Cmd + Enter) to see what they do. Note that # denotes a comment, and therefore it will run as a line of text. Experiment and have fun! # Assign a value (e.g., 9) to an object, say x. x &lt;- 9 # this means &quot;x gets the value of 9&quot; # Get the value for x. x # Note that R is case-sensitive. If you typed X, you&#39;ll get an error message. # If you want to know what objects are in the workspace (i.e., R&#39;s memory), look at the Environments tab or type ls(). ls() # You may remove an object (e.g., x) from the workspace. rm(x) # where rm stands for remove # If there are too many objects in the workspace, you may remove all objects from the workspace using rm(list=ls()). rm(list = ls()) # Assign a non-numerical value by putting the value in quotation marks. y &lt;- &quot;hello!&quot; # Get the value of y. Notice the value of y is in quotation marks, indicating it is a non-numerical value. y # Perform the following mathematical operations in R. 11 + 10 11 - 10 11 * 10 11 / 10 11 ^ 10 11 ^ (1/2) sqrt(11) # this number should be the same as above line log(11) # taking natural log (log base e) log10(11) # taking log base 10 exp(11) # taking the exponential # Perform mathematical operations in R with an object (e.g., a). a &lt;- 11 # a gets the value of 11 a + 10 a - 10 a * 10 a / 10 a ^ (1/2) sqrt(a) log(a) log10(a) exp(a) # Perform mathematical operations with more than one object. y &lt;- 2 # notice that 2 now replaces the value hello. a + y a - y a * y a / y a ^ (1/y) # You cannot perform mathematical operations with non-numerical objects. b &lt;- &quot;1&quot; # recall, putting things in between quotation marks makes it non-numerical, even if 1 is a number. a + b # you get an error here because you cannot perform mathematical operations with non-numerical objects. # An object can store more than one thing, such as a set of numbers or a set of characters. This is known as a vector and can be created using c(). # Let&#39;s say we have 3 people, Alice, Bob, and Calvin. We can create a vector called &quot;name&quot; to store the three people&#39;s names. name &lt;- c(&quot;Alice&quot;, &quot;Bob&quot;, &quot;Calvin&quot;) 1.6 Some Tips and Tricks 1.6.1 Softwrap Long Lines Sometimes, we might write commands in the Script editor section that are too long (horizontally) to fit the window. To see the entire command, we might need to scroll horizontally. This can be frustrating. (Its like notepad, without word wrap.) Fortunately, we can wrap the text such that the code fits into the size of the window. Go to Code &gt; Soft Wrap Long Lines. I highly recommend you do this, especially if you tend to write a lot of comments in the script file like I do. 1.6.2 Using R Projects When we analyse data, we may have a bunch of different files from different projects all strewn in a single directory. This can be quite messy. To stay organised, it is best that we create a project. To do this, go to File &gt; New Project. A dialogue window with three options, New Directory, Existing Directory and Version Control, will appear. Select New Directory, followed by New Project. After RStudio has created the project, it will change the working directory to the project directory so that you can access all the files (e.g., data, script) related to this project in this directory. RStudio will also create a file with the extension .Rproj in the project directory. When you open this file, RStudio will automatically start a new session with the project directory as your working directory. While it is not absolutely necessary to use RStudio projects in this course, I recommend it because it will help keep you organized. 1.7 Entering Data Directly Into R Before we can conduct any analysis, we need to give R some data. One way is to key the data directly into R. Lets say we have three people, Bob, Andrea, and Calvin. We have their ages, the number of children each of them has, and their gender. Name Age No. of Children Gender Bob 48 1 Male Andrea 47 3 Female Calvin 49 2 Male First, we create a variable we call name, with the three peoples names. name &lt;- c(&quot;Bob&quot;, &quot;Andrea&quot;, &quot;Calvin&quot;) # notice the names are between quotation marks # this tells R that name is a string (non-numerical) variable So, if we type name into the console, we should get: ## [1] &quot;Bob&quot; &quot;Andrea&quot; &quot;Calvin&quot; "],["tidyverse.html", "2 Using tidyverse 2.1 Installing tidyverse 2.2 Load tidyverse 2.3 Import Data 2.4 Data wrangling with dplyr package", " 2 Using tidyverse The tidyverse is a collection of R packages that many data analysts use. In this course, we will be heavily relying on a few of the packages such as readr, dplyr and ggplot2 that are in this collection. Instead of installing each package separately as we normally would, we can simply install tidyverse and that would install all the other packages that we want. 2.1 Installing tidyverse install.packages(&quot;tidyverse&quot;) Although we have installed tidyverse, we cannot use it unless we load it. To load it, we need the library() function. 2.2 Load tidyverse library(tidyverse) Now that we have tidyverse loaded, lets do stuff with it. Lets start with importing data. 2.3 Import Data Typically, R users do not have to enter their data into R directly. Instead, they already have their dataset in various formats, such as .csv, .txt, .sav, .xlsx, etc. So what they need to do is to import the dataset into R. In this class, I typically use .csv files. To import .csv files, we can use the read_csv() function from the readr package in tidyverse. data &lt;- read_csv(&quot;Materialism.csv&quot;) # this code is saying... # read in the .csv file, &quot;Materialism.csv&quot; and assign it to &quot;data&quot; # from now on, &quot;data&quot; will refer to the data in this csv file You may also use the built-in R function read.csv(). If you do so, you dont have to load the tidyverse package. read.csv() is supposedly slower than read_csv(), which in turn is slower than data.tables fread(). For our purposes, though, it really doesnt matter which you use, so long as you can successfully import the data file. data &lt;- read.csv(&quot;Materialism.csv&quot;) If you have other file types, such as .txt, .sav, .xlsx, you might need different packages. For example, for excel files (.xlsx), you will need the readxl package. For SPSS (.sav), you will need the haven package or the foreign package. For this class, I wont use file types aside from .csv, but it is good to be aware of the packages to use if you want to import other file types. 2.3.1 Check Imported Dataset Before conducting any analyses, check that the dataset has been imported correctly. Go to the Environment pane (top right pane). Click data. The top left pane should show the imported data. Alternatively, you may type View(data) into the console. Rows: The data for each participant is recorded in a single row (e.g., data for Participant 1 is in Row 1) Columns: The data for each variable is recorded in a single column. Names of the variables are in the headers for each column Scroll down to ensure all rows have been imported correctly. There should be 99 rows. Scroll right to ensure all columns have been imported correctly. There should be 17 columns. Another way to check the imported dataset is using the str() or the glimpse() functions. Both give you roughly similar information (e.g., that there are 99 rows and 17 columns, the names of the variables) str(data) ## &#39;data.frame&#39;: 99 obs. of 17 variables: ## $ PIN : int 1 2 3 4 5 6 7 8 9 10 ... ## $ Gender : chr &quot;female&quot; &quot;female&quot; &quot;female&quot; &quot;female&quot; ... ## $ Income2lowhigh7: chr &quot;low&quot; &quot;low&quot; &quot;high&quot; &quot;high&quot; ... ## $ FB2016 : int 101 139 196 156 84 69 4 154 158 19 ... ## $ FB2017 : int 140 134 171 207 121 55 40 217 201 57 ... ## $ YT2016 : int 65 89 107 18 78 111 60 88 106 22 ... ## $ YT2017 : int 79 80 90 8 55 110 60 30 117 25 ... ## $ UserType : int 1 2 3 1 2 3 1 2 3 1 ... ## $ MVS01 : int 4 4 5 2 2 3 2 2 3 2 ... ## $ MVS02 : int 3 3 4 3 2 4 3 3 4 3 ... ## $ MVS03 : int 3 3 4 3 3 4 3 3 4 3 ... ## $ MVS04 : int 3 3 3 2 2 5 4 4 3 4 ... ## $ MVS05 : int 3 3 4 3 3 4 3 3 4 2 ... ## $ MVS06 : int 4 4 5 2 2 3 4 4 5 2 ... ## $ MVS07 : int 3 2 4 2 3 3 3 3 4 3 ... ## $ MVS08 : int 4 4 5 4 4 5 3 3 4 3 ... ## $ MVS09 : int 2 2 1 3 3 2 3 3 2 4 ... glimpse(data) ## Rows: 99 ## Columns: 17 ## $ PIN &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,~ ## $ Gender &lt;chr&gt; &quot;female&quot;, &quot;female&quot;, &quot;female&quot;, &quot;female&quot;, &quot;female&quot;, &quot;fem~ ## $ Income2lowhigh7 &lt;chr&gt; &quot;low&quot;, &quot;low&quot;, &quot;high&quot;, &quot;high&quot;, &quot;high&quot;, &quot;high&quot;, &quot;high&quot;, ~ ## $ FB2016 &lt;int&gt; 101, 139, 196, 156, 84, 69, 4, 154, 158, 19, 64, 197, ~ ## $ FB2017 &lt;int&gt; 140, 134, 171, 207, 121, 55, 40, 217, 201, 57, 47, 233~ ## $ YT2016 &lt;int&gt; 65, 89, 107, 18, 78, 111, 60, 88, 106, 22, 27, 116, 10~ ## $ YT2017 &lt;int&gt; 79, 80, 90, 8, 55, 110, 60, 30, 117, 25, 11, 104, 120,~ ## $ UserType &lt;int&gt; 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, ~ ## $ MVS01 &lt;int&gt; 4, 4, 5, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 3, 3, 3, 4, ~ ## $ MVS02 &lt;int&gt; 3, 3, 4, 3, 2, 4, 3, 3, 4, 3, 2, 4, 1, 3, 2, 3, 2, 4, ~ ## $ MVS03 &lt;int&gt; 3, 3, 4, 3, 3, 4, 3, 3, 4, 3, 3, 4, 2, 2, 3, 4, 4, 5, ~ ## $ MVS04 &lt;int&gt; 3, 3, 3, 2, 2, 5, 4, 4, 3, 4, 4, 4, 2, 2, 4, 3, 3, 4, ~ ## $ MVS05 &lt;int&gt; 3, 3, 4, 3, 3, 4, 3, 3, 4, 2, 2, 3, 3, 3, 4, 4, 4, 5, ~ ## $ MVS06 &lt;int&gt; 4, 4, 5, 2, 2, 3, 4, 4, 5, 2, 2, 3, 3, 3, 4, 2, 2, 3, ~ ## $ MVS07 &lt;int&gt; 3, 2, 4, 2, 3, 3, 3, 3, 4, 3, 1, 4, 4, 1, 5, 1, 3, 2, ~ ## $ MVS08 &lt;int&gt; 4, 4, 5, 4, 4, 5, 3, 3, 4, 3, 3, 4, 2, 2, 3, 3, 3, 4, ~ ## $ MVS09 &lt;int&gt; 2, 2, 1, 3, 3, 2, 3, 3, 2, 4, 4, 3, 4, 4, 3, 3, 3, 2, ~ 2.4 Data wrangling with dplyr package Sometimes, a data set can be overwhelming. We might want to, say, select specific columns to analyse. Or, we might only want to look at specific participants. Or we might want to create new variables from existing ones. All of these is made possible with functions in the dplyr package in tidyverse. The functions we will use in this class from the dplyr package are as follows: dplyr verbs Description select() select specific columns filter() filter (keep, select) specific rows mutate() create new columns summarise() summarise values group_by() apply operations to different groups 2.4.1 Select() This function allows us to select specific columns. This is especially useful if we have many columns to work with and we only want to focus on a few. Lets say we only want to select PIN, and the MVS01 to MVS09 columns, we can: MVS_only &lt;- data %&gt;% # create the subset called &quot;MVS_only&quot; from &quot;data&quot; select(PIN, MVS01:MVS09) # and select only PIN and the columns MVS01 to MVS09 This is what the first six rows of MVS_only should look like: ## PIN MVS01 MVS02 MVS03 MVS04 MVS05 MVS06 MVS07 MVS08 MVS09 ## 1 1 4 3 3 3 3 4 3 4 2 ## 2 2 4 3 3 3 3 4 2 4 2 ## 3 3 5 4 4 3 4 5 4 5 1 ## 4 4 2 3 3 2 3 2 2 4 3 ## 5 5 2 2 3 2 3 2 3 4 3 ## 6 6 3 4 4 5 4 3 3 5 2 Although select() is used to select specific columns, I sometimes also use it to re-arrange the order of the columns. (In dplyr, the function to re-arrange the order of the columns is arrange(), which also helps you re-arrange rows in addition to columns) Lets say we want the MVS01 to MVS09 columns to come before PIN. We can: MVS_Pinfirst &lt;- data %&gt;% select(MVS01:MVS09, PIN) This is what the first six rows of MVS_Pinfirst should look like: ## MVS01 MVS02 MVS03 MVS04 MVS05 MVS06 MVS07 MVS08 MVS09 PIN ## 1 4 3 3 3 3 4 3 4 2 1 ## 2 4 3 3 3 3 4 2 4 2 2 ## 3 5 4 4 3 4 5 4 5 1 3 ## 4 2 3 3 2 3 2 2 4 3 4 ## 5 2 2 3 2 3 2 3 4 3 5 ## 6 3 4 4 5 4 3 3 5 2 6 2.4.2 Filter() Sometimes, we want to select specific kinds of participants to do our analyses on (e.g., say from specific conditions, or maybe only male or female participants). We use filter() to select those. New R users sometimes confuse select() with filter(). I like to differentiate them this way: filter() is used to select rows whereas select() is used to select columns. So, lets say we want to select only male participants. male_only &lt;- data %&gt;% # create &quot;male_only&quot; from &quot;data&quot;, filter(Gender == &quot;male&quot;) # then filter (keep) only male participants Notice that the double equal sign == is used here. In programming languages, the == sign is used when we are comparing the left and the right hand side. Here, were comparing each row under the column Gender to the word male. If that row matches the word male, we will filter (keep) that row. Otherwise, we will toss it out. This is what the first six rows of male_only should look like: ## PIN Gender Income2lowhigh7 FB2016 FB2017 YT2016 YT2017 UserType MVS01 MVS02 ## 1 51 male low 163 201 113 118 3 4 4 ## 2 52 male high 156 213 82 30 1 2 3 ## 3 53 male high 181 234 99 128 2 2 1 ## 4 54 male high 213 196 92 90 3 3 4 ## 5 55 male low 168 144 102 117 1 4 1 ## 6 56 male low 236 162 107 101 2 4 2 ## MVS03 MVS04 MVS05 MVS06 MVS07 MVS08 MVS09 ## 1 5 5 4 4 5 4 1 ## 2 4 2 2 3 2 2 3 ## 3 4 2 2 3 2 2 3 ## 4 5 3 3 4 3 3 2 ## 5 4 4 4 4 4 4 2 ## 6 4 4 4 4 3 4 2 2.4.3 Mutate() Sometimes, we might want to create new variables, say averages or totals. Lets say we want to find the average of time spent on YouTube in the two years. To help us make the data set more manageable, maybe we first select the variables PIN, YT2016, and YT2017. Then, we create an average called average_YT from YT2016 and YT2017. with_average &lt;- data %&gt;% select(PIN, YT2016, YT2017) %&gt;% mutate(average_YT = (YT2016 + YT2017) / 2) The first 6 rows of with_average looks like this: head(with_average) ## PIN YT2016 YT2017 average_YT ## 1 1 65 79 72.0 ## 2 2 89 80 84.5 ## 3 3 107 90 98.5 ## 4 4 18 8 13.0 ## 5 5 78 55 66.5 ## 6 6 111 110 110.5 2.4.4 Summarise() 2.4.5 Group_by() Reference: http://genomicsclass.github.io/book/pages/dplyr_tutorial.html "],["tha1.html", "3 Assignment 1", " 3 Assignment 1 Under construction "],["tha2.html", "4 Assignment 2", " 4 Assignment 2 Under construction "],["tha3.html", "5 Assignment 3", " 5 Assignment 3 Under construction "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
